!function(){"use strict";angular.module("adaApp",["ui.bootstrap","templates"])}(),function(){"use strict";angular.module("templates",[])}(),function(){"use strict";angular.module("adaApp").service("NewQuestion",["$http",function(e){var t=this;t.test="something",t.newQuestionDataType="",t.multipleChoiceAnswers=[{text:"",compliant:!1}],t.answerType="true_false",t.setAnswerType=function(e){t.answerType=e.target.value},t.addMultipleChoiceInput=function(){t.multipleChoiceAnswers.push({text:"",compliant:!1})}}])}(),function(){"use strict";angular.module("adaApp").controller("QuestionnaireController",["$http","Questions","NewQuestion","$window",function(e,t,n,s){function i(){t.init().then(function(){r.questions=t.questions,r.updatePage()})}var r=this;i(),r.getOverallCompliance=function(){return t.overallCompliance()},r.saveAnswer=function(e){t.saveAnswer(e)},r.getWasAnswered=function(e){return t.wasAnswered(e)},r.getCompliantAnswers=function(e){return t.compliantAnswers(e)},r.getSelectedAnswerText=function(e){return t.selectedAnswerText(e)},r.newQuestionText="",r.newQuestionAnswerType=n.answerType,r.newQuestionHelpUrl="",r.trueFalseAnswers={},r.newQuestionMultipleChoiceAnswers=n.multipleChoiceAnswers,r.rangeAnswer=[],r.rangeMeasurement="",r.newQuestion=function(){var e={text:r.newQuestionText,data_type:r.newQuestionAnswerType,default_question:!0,help_url:r.newQuestionHelpUrl};switch(e.data_type){case"true_false":e.answers=[{text:r.trueFalseAnswers["true"],compliant:!0},{text:r.trueFalseAnswers["false"],compliant:!1}];break;case"multiple_choice":e.answers=[],_.forEach(r.newQuestionMultipleChoiceAnswers,function(t){e.answers.push(t)});break;case"range":e.answers={},e.answers.text=r.rangeMeasurement,e.answers.compliant_range=r.rangeAnswer}return e},r.addQuestion=function(){t.saveQuestion(r.newQuestion()).then(function(){i(),swal("Success!","You're question has been submitted","success"),r.resetForm()})},r.deleteQuestion=function(e){t.deleteQuestion(e,i)},r.displayAnswerForm=function(e){n.setAnswerType(e),r.newQuestionAnswerType=n.answerType},r.addMultipleChoiceAnswer=function(){n.addMultipleChoiceInput()},r.resetForm=function(){r.newQuestionText="",r.trueFalseAnswers="",r.newQuestionMultipleChoiceAnswers=[],r.rangeMeasurement="",r.newQuestionHelpUrl="",r.rangeAnswer=[],r.newQuestionMultipleChoiceAnswers=[{text:"",compliant:!1}]},r.pageSize=6,r.currentPage=1,r.updatePage=function(){r.questionsPaginated=[];var e=(r.currentPage-1)*r.pageSize,t=r.currentPage*r.pageSize;for(t;t>e&&e<r.questions.length;e++)r.questionsPaginated.push(r.questions[e])},r.print=function(){s.print()}}])}(),function(){"use strict";angular.module("adaApp").service("Questions",["$http","$timeout",function(e,t){function n(){return e.get("get-questions")}var s=this;s.questions=[],s.init=function(){return n().then(function(e){s.questions=e.data},function(e){alert("There was a problem retrieving questions from the database."),console.log(e)})},s.overallCompliance=function(){return _.every(s.questions,["compliant",!0])};var i=null;s.saveAnswer=function(n){function r(e){e.active=!0,i=t(function(){e.active=!1,i=null,_.forEach(s.questions,function(e){e.active=!1})},1820)}s.setCompliance(n),e.post("post-answer",{id:n._id,selected_answer_id:n.selected_answer_id||null,user_input:n.user_input,compliant:n.compliant}).then(function(e){},function(e){alert("There was a problem saving your answer."),console.log(e)}),null!==i&&t.cancel(i),r(n)},s.setCompliance=function(e){if("range"===e.data_type){var t=e.answers[0].compliant_range,n=t[0],s=t[1];e.compliant=n<=e.user_input&&e.user_input<=s}else{var i=e.answers[e.selected_answer_id];i&&(e.compliant=i.compliant)}},s.wasAnswered=function(e){if("range"===e.data_type){if(e.user_input&&!e.selected_answer_id)return!!e.user_input}else if(e.selected_answer_id&&!e.user_input)return!!e.selected_answer_id},s.selectedAnswerText=function(e){return"range"===e.data_type?e.user_input:e.selected_answer_id?e.answers[e.selected_answer_id].text:void 0},s.compliantAnswers=function(e){var t=[],n="The compliant answer is: ";if("range"===e.data_type){var s=e.answers[0].compliant_range;_.forEach(s,function(e){t.push(e)}),n="The compliant range is: "}else _.forEach(e.answers,function(e){e.compliant===!0&&t.push(e)}),t.length>1&&(n="The compliant answers are: ");return{label:n,compliantAnswers:t}},s.saveQuestion=function(t){return console.log(t),e.post("save-question",t).then(function(){s.init()},function(e){alert("There was a problem saving the question."),console.log(e)})},s.deleteQuestion=function(t,n){console.log("deleting from service"),swal({title:"Are you sure?",text:"You will not be able to recover this question",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",closeOnConfirm:!1},function(){e.post("delete-question",{_id:t._id}).then(function(){n(),swal("Deleted!","You have deleted the question.","success")},function(e){alert("There was a problem deleting the question"),console.log(e)})})}}])}(),function(){"use strict";angular.module("templates").directive("multipleChoiceInput",function(){return{restrict:"E",scope:"=",templateUrl:"/build/templates/question-types/multiple-choice/multiple-choice.html"}})}(),function(){"use strict";angular.module("templates").directive("rangeInput",function(){return{restrict:"E",scope:"=",templateUrl:"/build/templates/question-types/range/range.html"}})}(),function(){"use strict";angular.module("templates").directive("trueFalseInput",function(){return{restrict:"E",scope:"=",templateUrl:"/build/templates/question-types/true-false/true-false.html"}})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkYS5tb2R1bGUuanMiLCJkaXJlY3RpdmVzL2RpcmVjdGl2ZXMubW9kdWxlLmpzIiwibmV3LXF1ZXN0aW9ucy9uZXctcXVlc3Rpb24uc2VydmljZS5qcyIsInF1ZXN0aW9ubmFpcmUvcXVlc3Rpb25uYWlyZS5jb250cm9sbGVyLmpzIiwicXVlc3Rpb25uYWlyZS9xdWVzdGlvbm5haXJlLnNlcnZpY2UuanMiLCJkaXJlY3RpdmVzL3F1ZXN0aW9uLXR5cGVzL211bHRpcGxlLWNob2ljZS9tdWx0aXBsZS1jaG9pY2UuZGlyZWN0aXZlLmpzIiwiZGlyZWN0aXZlcy9xdWVzdGlvbi10eXBlcy9yYW5nZS9yYW5nZS5kaXJlY3RpdmUuanMiLCJkaXJlY3RpdmVzL3F1ZXN0aW9uLXR5cGVzL3RydWUtZmFsc2UvdHJ1ZS1mYWxzZS5kaXJlY3RpdmUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsInNlcnZpY2UiLCIkaHR0cCIsInZtIiwidGhpcyIsInRlc3QiLCJuZXdRdWVzdGlvbkRhdGFUeXBlIiwibXVsdGlwbGVDaG9pY2VBbnN3ZXJzIiwidGV4dCIsImNvbXBsaWFudCIsImFuc3dlclR5cGUiLCJzZXRBbnN3ZXJUeXBlIiwiZXZlbnQiLCJ0YXJnZXQiLCJ2YWx1ZSIsImFkZE11bHRpcGxlQ2hvaWNlSW5wdXQiLCJwdXNoIiwiY29udHJvbGxlciIsIlF1ZXN0aW9ucyIsIk5ld1F1ZXN0aW9uIiwiJHdpbmRvdyIsImRpc3BsYXlRdWVzdGlvbnMiLCJpbml0IiwidGhlbiIsInF1ZXN0aW9ucyIsInVwZGF0ZVBhZ2UiLCJnZXRPdmVyYWxsQ29tcGxpYW5jZSIsIm92ZXJhbGxDb21wbGlhbmNlIiwic2F2ZUFuc3dlciIsInF1ZXN0aW9uIiwiZ2V0V2FzQW5zd2VyZWQiLCJ3YXNBbnN3ZXJlZCIsImdldENvbXBsaWFudEFuc3dlcnMiLCJjb21wbGlhbnRBbnN3ZXJzIiwiZ2V0U2VsZWN0ZWRBbnN3ZXJUZXh0Iiwic2VsZWN0ZWRBbnN3ZXJUZXh0IiwibmV3UXVlc3Rpb25UZXh0IiwibmV3UXVlc3Rpb25BbnN3ZXJUeXBlIiwibmV3UXVlc3Rpb25IZWxwVXJsIiwidHJ1ZUZhbHNlQW5zd2VycyIsIm5ld1F1ZXN0aW9uTXVsdGlwbGVDaG9pY2VBbnN3ZXJzIiwicmFuZ2VBbnN3ZXIiLCJyYW5nZU1lYXN1cmVtZW50IiwibmV3UXVlc3Rpb24iLCJkYXRhX3R5cGUiLCJkZWZhdWx0X3F1ZXN0aW9uIiwiaGVscF91cmwiLCJhbnN3ZXJzIiwiXyIsImZvckVhY2giLCJhbnN3ZXIiLCJjb21wbGlhbnRfcmFuZ2UiLCJhZGRRdWVzdGlvbiIsInNhdmVRdWVzdGlvbiIsInN3YWwiLCJyZXNldEZvcm0iLCJkZWxldGVRdWVzdGlvbiIsImRpc3BsYXlBbnN3ZXJGb3JtIiwiYWRkTXVsdGlwbGVDaG9pY2VBbnN3ZXIiLCJwYWdlU2l6ZSIsImN1cnJlbnRQYWdlIiwicXVlc3Rpb25zUGFnaW5hdGVkIiwiaSIsImoiLCJsZW5ndGgiLCJwcmludCIsIiR0aW1lb3V0IiwiZ2V0UXVlc3Rpb25zIiwiZ2V0IiwicmVzIiwiZGF0YSIsImVyciIsImFsZXJ0IiwiY29uc29sZSIsImxvZyIsImV2ZXJ5Iiwic2F2aW5nTWVzc2FnZVRpbWVvdXQiLCJkaXNwbGF5U2F2aW5nTWVzc2FnZSIsImFjdGl2ZSIsInNldENvbXBsaWFuY2UiLCJwb3N0IiwiaWQiLCJfaWQiLCJzZWxlY3RlZF9hbnN3ZXJfaWQiLCJ1c2VyX2lucHV0IiwiY2FuY2VsIiwiY29tcGxpYW50UmFuZ2UiLCJsb3dCb3VuZCIsImhpZ2hCb3VuZCIsInNlbGVjdGVkQW5zd2VyIiwibGFiZWwiLCJyYW5nZSIsImJvdW5kIiwidXBkYXRlVmlld0NhbGxiYWNrIiwidGl0bGUiLCJ0eXBlIiwic2hvd0NhbmNlbEJ1dHRvbiIsImNvbmZpcm1CdXR0b25Db2xvciIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2xvc2VPbkNvbmZpcm0iLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInNjb3BlIiwidGVtcGxhdGVVcmwiXSwibWFwcGluZ3Mi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QUEsRUFDQXpELGlCQUFBQSxJQUtBOUIsRUFBQWtELGFBQUEsU0FBQXhCLEdBRUEsTUFEQTRDLFNBQUFDLElBQUE3QyxHQUNBM0IsRUFBQThFLEtBQUEsZ0JBQUFuRCxHQUNBTixLQUFBLFdBRUFwQixFQUFBbUIsUUFFQSxTQUFBaUQsR0FDQUMsTUFBQSw0Q0FDQUMsUUFBQUMsSUFBQUgsTUFJQXBFLEVBQUFxRCxlQUFBLFNBQUEzQixFQUFBZ0UsR0FDQXBCLFFBQUFDLElBQUEseUJBRUFwQixNQUFBd0MsTUFBQSxnQkFDQXRGLEtBQUEsZ0RBQ0F1RixLQUFBLFVBQ0FDLGtCQUFBLEVBQ0FDLG1CQUFBLFVBQ0FDLGtCQUFBLGtCQUNBQyxnQkFBQSxHQUVBLFdBRUFqRyxFQUFBOEUsS0FBQSxtQkFBQUUsSUFBQXJELEVBQUFxRCxNQUVBM0QsS0FBQSxXQUNBc0UsSUFDQXZDLEtBQUEsV0FBQSxpQ0FBQSxZQUVBLFNBQUFpQixHQUNBQyxNQUFBLDZDQUNBQyxRQUFBQyxJQUFBSCxjQzVOQSxXQUVBLFlBRUF4RSxTQUFBQyxPQUFBLGFBQ0FvRyxVQUFBLHNCQUFBLFdBQ0EsT0FDQUMsU0FBQSxJQUNBQyxNQUFBLElBQ0FDLFlBQUEsNkVDVEEsV0FFQSxZQUVBeEcsU0FBQUMsT0FBQSxhQUNBb0csVUFBQSxhQUFBLFdBQ0EsT0FDQUMsU0FBQSxJQUNBQyxNQUFBLElBQ0FDLFlBQUEseURDVEEsV0FFQSxZQUVBeEcsU0FBQUMsT0FBQSxhQUNBb0csVUFBQSxpQkFBQSxXQUNBLE9BQ0FDLFNBQUEsSUFDQUMsTUFBQSxJQUNBQyxZQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuKGZ1bmN0aW9uKClcbntcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYWRhQXBwJywgWyd1aS5ib290c3RyYXAnLCAndGVtcGxhdGVzJ10pO1xuXG59KCkpO1xuIiwiXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3RlbXBsYXRlcycsIFtdKTtcblxufSgpKTtcbiIsIlxuKGZ1bmN0aW9uICgpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhZGFBcHAnKVxuICAgICAgICAuc2VydmljZSgnTmV3UXVlc3Rpb24nLCBmdW5jdGlvbiAoJGh0dHApIHtcblxuICAgICAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICAgICAgdm0udGVzdCA9ICdzb21ldGhpbmcnO1xuXG4gICAgICAgICAgICB2bS5uZXdRdWVzdGlvbkRhdGFUeXBlID0gJyc7XG5cbiAgICAgICAgICAgIC8vIEhhcmQtY29kZSBlbXB0eSBhbnN3ZXIgc28gdGhhdCBhdCBsZWFzdCBvbmUgaW5wdXQgZWxlbWVudCBkaXNwbGF5cyBpbiBuZy1yZXBlYXQuXG4gICAgICAgICAgICB2bS5tdWx0aXBsZUNob2ljZUFuc3dlcnMgPSBbe3RleHQ6ICcnLCBjb21wbGlhbnQ6IGZhbHNlfV07XG5cbiAgICAgICAgICAgIC8vIERpc3BsYXkgYSBkZWZhdWx0IGFuc3dlciBpbnB1dCB0eXBlIGluIE5ldyBRdWVzdGlvbiBmb3JtLlxuICAgICAgICAgICAgdm0uYW5zd2VyVHlwZSA9ICd0cnVlX2ZhbHNlJztcblxuICAgICAgICAgICAgdm0uc2V0QW5zd2VyVHlwZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHZtLmFuc3dlclR5cGUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgIHZtLmFkZE11bHRpcGxlQ2hvaWNlSW5wdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdm0ubXVsdGlwbGVDaG9pY2VBbnN3ZXJzLnB1c2goe3RleHQ6ICcnLCBjb21wbGlhbnQ6IGZhbHNlfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgfSk7XG5cbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXG5cbiAndXNlIHN0cmljdCc7XG5cbiBhbmd1bGFyLm1vZHVsZSgnYWRhQXBwJylcbiAgICAgLmNvbnRyb2xsZXIoJ1F1ZXN0aW9ubmFpcmVDb250cm9sbGVyJywgZnVuY3Rpb24oJGh0dHAsIFF1ZXN0aW9ucywgTmV3UXVlc3Rpb24sICR3aW5kb3cpIHtcblxuICAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICAgLy8gR2V0IHF1ZXN0aW9ucyBmcm9tIGRhdGFiYXNlLCBhbmQgdGhlbiBiaW5kIHZtLnF1ZXN0aW9ucyB0byB0aGUgdW5kZXJseWluZyBxdWVzdGlvbnMgY29sbGVjdGlvbiBmcm9tIHRoZVxuICAgICAgICAgLy8gUXVlc3Rpb25zIFNlcnZpY2UuXG4gICAgICAgICBkaXNwbGF5UXVlc3Rpb25zKCk7XG5cbiAgICAgICAgIGZ1bmN0aW9uIGRpc3BsYXlRdWVzdGlvbnMoKSB7XG4gICAgICAgICAgICAgUXVlc3Rpb25zLmluaXQoKVxuICAgICAgICAgICAgICAgICAudGhlbiggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgdm0ucXVlc3Rpb25zID0gUXVlc3Rpb25zLnF1ZXN0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgIHZtLnVwZGF0ZVBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC8vIE92ZXJhbGwgY29tcGxpYW5jZSBvZiBxdWVzdGlvbm5haXJlLCB0YWtpbmcgYWxsIHF1ZXN0aW9ucyBpbnRvIGNvbnNpZGVyYXRpb24uXG4gICAgICAgICB2bS5nZXRPdmVyYWxsQ29tcGxpYW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICByZXR1cm4gUXVlc3Rpb25zLm92ZXJhbGxDb21wbGlhbmNlKCk7XG4gICAgICAgICB9O1xuXG5cbiAgICAgICAgIC8vIFNhdmUgYW5zd2VycyBmb3IgaW5kaXZpZHVhbCBxdWVzdGlvbnMuXG4gICAgICAgICB2bS5zYXZlQW5zd2VyID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgUXVlc3Rpb25zLnNhdmVBbnN3ZXIocXVlc3Rpb24pO1xuICAgICAgICAgfTtcblxuXG4gICAgICAgICAvLyBSZXR1cm5zIGJvb2xlYW4gcmVwcmVzZW50aW5nIHdoZXRoZXIgYSBxdWVzdGlvbiBoYXMgYmVlbiBhbnN3ZXJlZC5cbiAgICAgICAgIHZtLmdldFdhc0Fuc3dlcmVkID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgcmV0dXJuIFF1ZXN0aW9ucy53YXNBbnN3ZXJlZChxdWVzdGlvbik7XG4gICAgICAgICB9O1xuXG4gICAgICAgICAvLyBSZXR1cm5zIGFuIGFycmF5IG9mIGNvbXBsaWFudCBhbnN3ZXIgZm9yIGEgcXVlc3Rpb24uXG4gICAgICAgICB2bS5nZXRDb21wbGlhbnRBbnN3ZXJzID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgcmV0dXJuIFF1ZXN0aW9ucy5jb21wbGlhbnRBbnN3ZXJzKHF1ZXN0aW9uKTtcbiAgICAgICAgIH07XG5cbiAgICAgICAgIC8vIFJldHVybnMgdGV4dCBvZiBjdXJyZW50IGFuc3dlclxuICAgICAgICAgdm0uZ2V0U2VsZWN0ZWRBbnN3ZXJUZXh0ID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgcmV0dXJuIFF1ZXN0aW9ucy5zZWxlY3RlZEFuc3dlclRleHQocXVlc3Rpb24pO1xuICAgICAgICAgfTtcblxuXG4gICAgICAgICAvKipcbiAgICAgICAgICAqICBRdWVzdGlvbiBNZXRob2RzXG4gICAgICAgICAgKi9cblxuICAgICAgICAgLy8gVE9ETzogTW92ZSBtb3JlIG9mIHRoaXMgbG9naWMgdG8gdGhlIFNlcnZpY2UuXG4gICAgICAgICAvLyBOZXcgUXVlc3Rpb24gVmFsdWVzXG4gICAgICAgICB2bS5uZXdRdWVzdGlvblRleHQgPSAnJztcbiAgICAgICAgIHZtLm5ld1F1ZXN0aW9uQW5zd2VyVHlwZSA9ICBOZXdRdWVzdGlvbi5hbnN3ZXJUeXBlO1xuICAgICAgICAgdm0ubmV3UXVlc3Rpb25IZWxwVXJsID0gJyc7XG5cbiAgICAgICAgIC8vIFByb3BlcnRpZXMgZm9yIHN0b3JpbmcgYW5zd2VycyBmb3IgbmV3IHF1ZXN0aW9ucy5cbiAgICAgICAgIHZtLnRydWVGYWxzZUFuc3dlcnMgPSB7fTtcbiAgICAgICAgIHZtLm5ld1F1ZXN0aW9uTXVsdGlwbGVDaG9pY2VBbnN3ZXJzID0gTmV3UXVlc3Rpb24ubXVsdGlwbGVDaG9pY2VBbnN3ZXJzO1xuICAgICAgICAgdm0ucmFuZ2VBbnN3ZXIgPSBbXTtcbiAgICAgICAgIHZtLnJhbmdlTWVhc3VyZW1lbnQgPSAnJztcblxuICAgICAgICAgdm0ubmV3UXVlc3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgdmFyIHF1ZXN0aW9uID0ge1xuICAgICAgICAgICAgICAgICB0ZXh0OiB2bS5uZXdRdWVzdGlvblRleHQsXG4gICAgICAgICAgICAgICAgIGRhdGFfdHlwZTogdm0ubmV3UXVlc3Rpb25BbnN3ZXJUeXBlLFxuXG4gICAgICAgICAgICAgICAgIC8vIEhhcmQtY29kaW5nIGFsbCBuZXcgcXVlc3Rpb25zIGFzIGRlZmF1bHQgcXVlc3Rpb25zIGZvciBub3cuXG4gICAgICAgICAgICAgICAgIGRlZmF1bHRfcXVlc3Rpb246IHRydWUsXG5cbiAgICAgICAgICAgICAgICAgaGVscF91cmw6IHZtLm5ld1F1ZXN0aW9uSGVscFVybFxuICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICBzd2l0Y2ggKHF1ZXN0aW9uLmRhdGFfdHlwZSkge1xuICAgICAgICAgICAgICAgICBjYXNlICd0cnVlX2ZhbHNlJzpcbiAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLmFuc3dlcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB2bS50cnVlRmFsc2VBbnN3ZXJzLnRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsaWFudDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB2bS50cnVlRmFsc2VBbnN3ZXJzLmZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGlhbnQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgIGNhc2UgJ211bHRpcGxlX2Nob2ljZSc6XG4gICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbi5hbnN3ZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godm0ubmV3UXVlc3Rpb25NdWx0aXBsZUNob2ljZUFuc3dlcnMsIGZ1bmN0aW9uIChhbnN3ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbi5hbnN3ZXJzLnB1c2goYW5zd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgY2FzZSAncmFuZ2UnOlxuICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24uYW5zd2VycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24uYW5zd2Vycy50ZXh0ID0gdm0ucmFuZ2VNZWFzdXJlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLmFuc3dlcnMuY29tcGxpYW50X3JhbmdlID0gdm0ucmFuZ2VBbnN3ZXI7XG4gICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICByZXR1cm4gcXVlc3Rpb247XG4gICAgICAgICB9O1xuXG5cbiAgICAgICAgIHZtLmFkZFF1ZXN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIFF1ZXN0aW9ucy5zYXZlUXVlc3Rpb24odm0ubmV3UXVlc3Rpb24oKSlcbiAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVF1ZXN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgc3dhbChcIlN1Y2Nlc3MhXCIsIFwiWW91J3JlIHF1ZXN0aW9uIGhhcyBiZWVuIHN1Ym1pdHRlZFwiLCBcInN1Y2Nlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICB2bS5yZXNldEZvcm0oKTtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICB9O1xuXG4gICAgICAgICB2bS5kZWxldGVRdWVzdGlvbiA9IGZ1bmN0aW9uIChxdWVzdGlvbikge1xuICAgICAgICAgICAgIFF1ZXN0aW9ucy5kZWxldGVRdWVzdGlvbihxdWVzdGlvbiwgZGlzcGxheVF1ZXN0aW9ucyk7XG4gICAgICAgICB9O1xuXG5cbiAgICAgICAgIHZtLmRpc3BsYXlBbnN3ZXJGb3JtID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgTmV3UXVlc3Rpb24uc2V0QW5zd2VyVHlwZShldmVudCk7XG4gICAgICAgICAgICAgdm0ubmV3UXVlc3Rpb25BbnN3ZXJUeXBlID0gIE5ld1F1ZXN0aW9uLmFuc3dlclR5cGU7XG4gICAgICAgICB9O1xuXG5cbiAgICAgICAgIHZtLmFkZE11bHRpcGxlQ2hvaWNlQW5zd2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIE5ld1F1ZXN0aW9uLmFkZE11bHRpcGxlQ2hvaWNlSW5wdXQoKTtcbiAgICAgICAgIH07XG5cbiAgICAgICAgIHZtLnJlc2V0Rm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICB2bS5uZXdRdWVzdGlvblRleHQgPSAnJztcbiAgICAgICAgICAgICB2bS50cnVlRmFsc2VBbnN3ZXJzID0gJyc7XG4gICAgICAgICAgICAgdm0ubmV3UXVlc3Rpb25NdWx0aXBsZUNob2ljZUFuc3dlcnMgPSBbXTtcbiAgICAgICAgICAgICB2bS5yYW5nZU1lYXN1cmVtZW50ID0gJyc7XG4gICAgICAgICAgICAgdm0ubmV3UXVlc3Rpb25IZWxwVXJsID0gJyc7XG4gICAgICAgICAgICAgdm0ucmFuZ2VBbnN3ZXIgPSBbXTtcbiAgICAgICAgICAgICB2bS5uZXdRdWVzdGlvbk11bHRpcGxlQ2hvaWNlQW5zd2VycyA9IFt7dGV4dDogJycsIGNvbXBsaWFudDogZmFsc2V9XTtcbiAgICAgICAgIH07XG5cbiAgICAgICAgIC8qKlxuICAgICAgICAgICogUGFnaW5hdGlvblxuICAgICAgICAgICovXG4gICAgICAgICB2bS5wYWdlU2l6ZSA9IDY7XG4gICAgICAgICB2bS5jdXJyZW50UGFnZSA9IDE7XG5cbiAgICAgICAgIHZtLnVwZGF0ZVBhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgdm0ucXVlc3Rpb25zUGFnaW5hdGVkID0gW107XG5cbiAgICAgICAgICAgICB2YXIgaSA9ICh2bS5jdXJyZW50UGFnZSAtIDEpICogdm0ucGFnZVNpemU7XG4gICAgICAgICAgICAgdmFyIGogPSB2bS5jdXJyZW50UGFnZSAqIHZtLnBhZ2VTaXplO1xuXG4gICAgICAgICAgICAgZm9yKGksIGo7IGkgPGogJiYgaSA8IHZtLnF1ZXN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICB2bS5xdWVzdGlvbnNQYWdpbmF0ZWQucHVzaChcbiAgICAgICAgICAgICAgICAgICB2bS5xdWVzdGlvbnNbaV1cbiAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9O1xuXG4gICAgICAgICAvKipcbiAgICAgICAgICAqICBQcmludGluZ1xuICAgICAgICAgICovXG4gICAgICAgICB2bS5wcmludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAkd2luZG93LnByaW50KCk7XG4gICAgICAgICB9O1xuICAgICB9KTtcblxuIH0oKSk7IiwiXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FkYUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdRdWVzdGlvbnMnLCBmdW5jdGlvbiAoJGh0dHAsICR0aW1lb3V0KSB7XG5cbiAgICAgICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZtLnF1ZXN0aW9ucyA9IFtdO1xuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogIEluaXQgTWV0aG9kc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8vIEluaXQgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgZnJvbSBRdWVzdGlvbm5haXJlIENvbnRyb2xsZXIgb24gcGFnZSBsb2FkLlxuICAgICAgICAgICAgdm0uaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UXVlc3Rpb25zKClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oIGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdm0ucXVlc3Rpb25zID0gcmVzLmRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGVyZSB3YXMgYSBwcm9ibGVtIHJldHJpZXZpbmcgcXVlc3Rpb25zIGZyb20gdGhlIGRhdGFiYXNlLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFF1ZXN0aW9ucygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCdnZXQtcXVlc3Rpb25zJyk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiAgUXVlc3Rpb25uYWlyZSBNZXRob2RzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgLy8gUmV0dXJucyBhIGJvb2xlYW4gcmVwcmVzZW50aW5nIHdoZXRoZXIgdGhlIHF1ZXN0aW9ubmFpcmUgaXMgY29tcGxpYW50LCBhY2NvdW50aW5nIGZvciBldmVyeSBxdWVzdGlvbi5cbiAgICAgICAgICAgIC8vIFF1ZXN0aW9ubmFpcmUgaXMgY29tcGxpYW50IGFzIGEgd2hvbGUgb25seSBpZiBldmVyeSBxdWVzdGlvbiBpcyBjb21wbGlhbnQuXG4gICAgICAgICAgICB2bS5vdmVyYWxsQ29tcGxpYW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5ldmVyeSh2bS5xdWVzdGlvbnMsIFsnY29tcGxpYW50JywgdHJ1ZV0pO1xuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqICBJbmRpdmlkdWFsIFF1ZXN0aW9uIC8gQW5zd2VyIE1ldGhvZHNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvLyBVcG9uIGFuc3dlcmluZyBhIHF1ZXN0aW9uLCBzZXQgdGhlIHF1ZXN0aW9uIGNvbXBsaWFuY2UsIHNhdmUgYW5zd2VyIHRvIHRoZSBkYXRhYmFzZSwgYW5kIGRpc3BsYXlcbiAgICAgICAgICAgIC8vICdzYXZpbmcnIG1lc3NhZ2UuXG4gICAgICAgICAgICB2YXIgc2F2aW5nTWVzc2FnZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgdm0uc2F2ZUFuc3dlciA9IGZ1bmN0aW9uIChxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZtLnNldENvbXBsaWFuY2UocXVlc3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgncG9zdC1hbnN3ZXInLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcXVlc3Rpb24uX2lkLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3RlZF9hbnN3ZXJfaWQgaXMgdXNlZCBmb3IgdHJ1ZS1mYWxzZSBhbmQgbXVsdGlwbGUtY2hvaWNlIHF1ZXN0aW9uIGlucHV0IHR5cGVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRfYW5zd2VyX2lkOiBxdWVzdGlvbi5zZWxlY3RlZF9hbnN3ZXJfaWQgfHwgbnVsbCxcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlcl9pbnB1dCBpcyB1c2VkIGZvciB0aGUgcmFuZ2UgaW5wdXQgcXVlc3Rpb24gdHlwZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfaW5wdXQ6IHF1ZXN0aW9uLnVzZXJfaW5wdXQsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlc2NyaWJlcyB3aGV0aGVyIG9yIG5vdCB0aGUgc2VsZWN0ZWQgb3IgaW5wdXQgYW5zd2VyIGlzIGluIGNvbXBsaWFuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGlhbnQ6IHF1ZXN0aW9uLmNvbXBsaWFudFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGVyZSB3YXMgYSBwcm9ibGVtIHNhdmluZyB5b3VyIGFuc3dlci4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gT3VyIGluaXRpYWwgdGhvdWdodCB3YXMgdG8gZGlzcGxheSB0aGUgJ3NhdmluZycgbWVzc2FnZSBvbmx5IGlmIFBPU1QgcmVxdWVzdCBpcyBzdWNjZXNzZnVsLCBidXQgdGhlXG4gICAgICAgICAgICAgICAgLy8gcHJvYmxlbSB3aXRoIHRoaXMgaXMgdGhlIGRlbGF5IGJldHdlZW4gaW5wdXR0aW5nIGFuIGFuc3dlciBhbmQgc2VlaW5nIHRoZSAnc2F2aW5nJyBtZXNzYWdlIHNlZW1zIHRvb1xuICAgICAgICAgICAgICAgIC8vIGxvbmcuIEZvciBub3cgd2UgYXJlIGxlYXZpbmcgdGhpcyBvdXRzaWRlIG9mIHRoZSBgcG9zdC50aGVuKClgIGJsb2NrLlxuICAgICAgICAgICAgICAgIGlmIChzYXZpbmdNZXNzYWdlVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwoc2F2aW5nTWVzc2FnZVRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRpc3BsYXlTYXZpbmdNZXNzYWdlKHF1ZXN0aW9uKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRpc3BsYXlTYXZpbmdNZXNzYWdlKHF1ZXN0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gJ3NhdmluZycgbWVzc2FnZSBkaXNwbGF5cyBpbnNpZGUgb2YgcXVlc3Rpb24gZWxlbWVudCB3aGVuIGBxdWVzdGlvbi5hY3RpdmUgPT09IHRydWVgLlxuICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbi5hY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgJ3NhdmluZycgbWVzc2FnZSBhZnRlciBkZWxheS5cbiAgICAgICAgICAgICAgICAgICAgc2F2aW5nTWVzc2FnZVRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbi5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmluZ01lc3NhZ2VUaW1lb3V0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoYXQgJ3NhdmluZycgbWVzc2FnZSBnZXRzIGNsZWFyZWQgb3V0IGZyb20gcHJldmlvdXMgcXVlc3Rpb24gaWYgbmV3IHF1ZXN0aW9uIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbnN3ZXJlZCBwcmlvciB0byBpdHMgJHRpbWVvdXQgY29tcGxldGluZy4gV2l0aCBtb3JlIHF1ZXN0aW9ucywgd2Ugd2lsbCBwcm9iYWJseSBvbmx5IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBvbmx5IHRoZSBxdWVzdGlvbnMgY3VycmVudGx5IGJlaW5nIGRpc3BsYXllZCBvbiB0aGUgcGFnZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh2bS5xdWVzdGlvbnMsIGZ1bmN0aW9uIChxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgMTgyMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICB2bS5zZXRDb21wbGlhbmNlID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24uZGF0YV90eXBlID09PSAncmFuZ2UnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBsaWFudFJhbmdlID0gcXVlc3Rpb24uYW5zd2Vyc1swXS5jb21wbGlhbnRfcmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dCb3VuZCA9IGNvbXBsaWFudFJhbmdlWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGlnaEJvdW5kID0gY29tcGxpYW50UmFuZ2VbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24uY29tcGxpYW50ID0gbG93Qm91bmQgPD0gcXVlc3Rpb24udXNlcl9pbnB1dCAmJiBxdWVzdGlvbi51c2VyX2lucHV0IDw9IGhpZ2hCb3VuZDtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZEFuc3dlciA9IHF1ZXN0aW9uLmFuc3dlcnNbcXVlc3Rpb24uc2VsZWN0ZWRfYW5zd2VyX2lkXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRBbnN3ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLmNvbXBsaWFudCA9IHNlbGVjdGVkQW5zd2VyLmNvbXBsaWFudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgLy8gV2UgdXNlIGB2bS53YXNBbnN3ZXJlZCgpYCB0byBkaXNwbGF5IHRoZSBjb21wbGlhbmNlIG9mIGEgcXVlc3Rpb24gb25seSBvbmNlIGl0IGhhcyBiZWVuIGFuc3dlcmVkLlxuICAgICAgICAgICAgdm0ud2FzQW5zd2VyZWQgPSBmdW5jdGlvbiAocXVlc3Rpb24pIHtcblxuICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbi5kYXRhX3R5cGUgPT09ICdyYW5nZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uLnVzZXJfaW5wdXQgJiYgIXF1ZXN0aW9uLnNlbGVjdGVkX2Fuc3dlcl9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhcXVlc3Rpb24udXNlcl9pbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uLnNlbGVjdGVkX2Fuc3dlcl9pZCAmJiAhcXVlc3Rpb24udXNlcl9pbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhcXVlc3Rpb24uc2VsZWN0ZWRfYW5zd2VyX2lkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdm0uc2VsZWN0ZWRBbnN3ZXJUZXh0ID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uLmRhdGFfdHlwZSA9PT0gJ3JhbmdlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlc3Rpb24udXNlcl9pbnB1dDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24uc2VsZWN0ZWRfYW5zd2VyX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlc3Rpb24uYW5zd2Vyc1txdWVzdGlvbi5zZWxlY3RlZF9hbnN3ZXJfaWRdLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBVc2VkIGZvciBkaXNwbGF5aW5nIGNvbXBsaWFudCBhbnN3ZXIgY2hvaWNlcyBmb3Igb3V0LW9mLWNvbXBsaWFuY2UgcXVlc3Rpb25zXG4gICAgICAgICAgICAvLyBpbiBRdWVzdGlvbm5haXJlIENvbXBsaWFuY2UgUmVwb3J0XG4gICAgICAgICAgICB2bS5jb21wbGlhbnRBbnN3ZXJzID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgY29tcGxpYW50QW5zd2VycyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gJ1RoZSBjb21wbGlhbnQgYW5zd2VyIGlzOiAnO1xuXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uLmRhdGFfdHlwZSA9PT0gJ3JhbmdlJykge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHF1ZXN0aW9uLmFuc3dlcnNbMF0uY29tcGxpYW50X3JhbmdlO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChyYW5nZSwgZnVuY3Rpb24oYm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgY29tcGxpYW50QW5zd2Vycy5wdXNoKGJvdW5kKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAnVGhlIGNvbXBsaWFudCByYW5nZSBpczogJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChxdWVzdGlvbi5hbnN3ZXJzLCBmdW5jdGlvbiAoYW5zd2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5zd2VyLmNvbXBsaWFudCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsaWFudEFuc3dlcnMucHVzaChhbnN3ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxpYW50QW5zd2Vycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9ICdUaGUgY29tcGxpYW50IGFuc3dlcnMgYXJlOiAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGlhbnRBbnN3ZXJzOiBjb21wbGlhbnRBbnN3ZXJzXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdm0uc2F2ZVF1ZXN0aW9uID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocXVlc3Rpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCdzYXZlLXF1ZXN0aW9uJywgcXVlc3Rpb24pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmluaXQoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGVyZSB3YXMgYSBwcm9ibGVtIHNhdmluZyB0aGUgcXVlc3Rpb24uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZtLmRlbGV0ZVF1ZXN0aW9uID0gZnVuY3Rpb24gKHF1ZXN0aW9uLCB1cGRhdGVWaWV3Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsZXRpbmcgZnJvbSBzZXJ2aWNlJyk7XG5cbiAgICAgICAgICAgICAgICBzd2FsKHsgdGl0bGU6IFwiQXJlIHlvdSBzdXJlP1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJZb3Ugd2lsbCBub3QgYmUgYWJsZSB0byByZWNvdmVyIHRoaXMgcXVlc3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogXCIjREQ2QjU1XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIGRlbGV0ZSBpdCFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25Db25maXJtOiBmYWxzZSB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnZGVsZXRlLXF1ZXN0aW9uJywge19pZDogcXVlc3Rpb24uX2lkfSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmlld0NhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3YWwoXCJEZWxldGVkIVwiLCBcIllvdSBoYXZlIGRlbGV0ZWQgdGhlIHF1ZXN0aW9uLlwiLCBcInN1Y2Nlc3NcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrIChlcnIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnVGhlcmUgd2FzIGEgcHJvYmxlbSBkZWxldGluZyB0aGUgcXVlc3Rpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgIH0pO1xufSgpKTtcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IE5laWwgU3RyYWluIG9uIDQvNi8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCd0ZW1wbGF0ZXMnKVxyXG4gICAgICAgIC5kaXJlY3RpdmUoJ211bHRpcGxlQ2hvaWNlSW5wdXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICAgICAgc2NvcGU6ICc9JyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3RlbXBsYXRlcy9xdWVzdGlvbi10eXBlcy9tdWx0aXBsZS1jaG9pY2UvbXVsdGlwbGUtY2hvaWNlLmh0bWwnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxufSgpKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgTmVpbCBTdHJhaW4gb24gNC82LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ3RlbXBsYXRlcycpXHJcbiAgICAgICAgLmRpcmVjdGl2ZSgncmFuZ2VJbnB1dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgICAgICBzY29wZTogJz0nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdGVtcGxhdGVzL3F1ZXN0aW9uLXR5cGVzL3JhbmdlL3JhbmdlLmh0bWwnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxufSgpKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgTmVpbCBTdHJhaW4gb24gNC82LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ3RlbXBsYXRlcycpXHJcbiAgICAgICAgLmRpcmVjdGl2ZSgndHJ1ZUZhbHNlSW5wdXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICAgICAgc2NvcGU6ICc9JyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3RlbXBsYXRlcy9xdWVzdGlvbi10eXBlcy90cnVlLWZhbHNlL3RydWUtZmFsc2UuaHRtbCdcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxufSgpKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
